syntax = "proto3";

option go_package = "github.com/numaproj/numaflow-go/pkg/apis/proto/map/v1";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

package map.v1;

service Map {
  // MapFn applies a function to each map request element.
  rpc MapFn(MapRequest) returns (MapResponse);

  // IsReady is the heartbeat endpoint for gRPC.
  rpc IsReady(google.protobuf.Empty) returns (ReadyResponse);

  // MapStreamFn is a bi-directional streaming rpc which applies a
  // Map function on each element of the stream and then returns streams
  // back MapResponse elements.
  // TODO(map-batch): in the target state when we move the current
  // unary implementation to bi-di as well, we can rename this and
  // use a single rpc for both.
  rpc MapStreamFn(stream MapRequest) returns (stream MapResponse);
}

/**
 * MapRequest represents a request element.
 */
message MapRequest {
  repeated string keys = 1;
  bytes value = 2;
  google.protobuf.Timestamp event_time = 3;
  google.protobuf.Timestamp watermark = 4;
  map<string, string> headers = 5;
  string id = 6;
}

/**
 * MapResponse represents a response element.
 */
// TODO(map-batch) - currently this is used by both batch map and unary map.
// Do we want to have a separate response struct for batch map responses
// which have only one element instead of a list of responses.
// In that case we need a different mechanism to indicate that all the responses for a given request
// have been completed.
message MapResponse {
  message Result {
    repeated string keys = 1;
    bytes value = 2;
    repeated string tags = 3;
  }
  repeated Result results = 1;
  string id = 2;
}

/**
 * ReadyResponse is the health check result.
 */
message ReadyResponse {
  bool ready = 1;
}